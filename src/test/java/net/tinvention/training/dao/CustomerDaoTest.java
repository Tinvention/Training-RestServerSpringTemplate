package net.tinvention.training.dao;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;

import java.sql.Connection;
import java.sql.SQLException;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.datasource.init.ScriptUtils;

import net.tinvention.training.config.AbstractTest;
import net.tinvention.training.model.Customer;

class CustomerDaoTest extends AbstractTest {

  @Autowired
  private CustomerDao customerDao;

  private Customer newCustomer;

  // Data fixes into init-db-test-data.sql
  private static final Long ID_1 = -1L;
  private static final String NAME_1 = "customerNameTest1";

  @BeforeEach
  void init() throws SQLException {
    try (Connection con = dataSource.getConnection();) {
      ScriptUtils.executeSqlScript(con, initDbTestDataScript); // it deletes all the recrods and
                                                               // insert test data
    } // try-with-resources

    newCustomer = new Customer();
    newCustomer.setName("name-test ");
    newCustomer.setNote("note-test ");
  }

  @Test
  public void list() {
    assertFalse(customerDao.list().isEmpty());
  }

  @Test
  public void add() {
    Long newId = customerDao.add(newCustomer); // The ID is generated by dbms
    assertNotNull(newId);
  }

  @Test
  public void getById() {
    assertEquals(NAME_1, customerDao.getById(ID_1).getName());
  }

  @Test
  public void updateById() {
    newCustomer.setId(ID_1);
    assertEquals(1, customerDao.updateById(newCustomer));
    assertEquals(newCustomer.getName(), customerDao.getById(ID_1).getName());
  }

  @Test
  public void deleteById() {
    assertEquals(1, customerDao.deleteById(ID_1));
  }

}
